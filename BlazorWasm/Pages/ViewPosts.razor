@page "/ViewPosts"
@using global::Shared
@using HttpClient.ClientInterfaces
@using System.Security.Claims
@inject IUserService userService
@inject IPostService postService
@inject NavigationManager navMgr


<div class="card" style="width: 100%">
    <h3>Display Posts</h3>
    <div class="filter-bar">
        <div class="filters-container">
            <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => { doShowFilters = !doShowFilters; titleFilter = "";})" alt="Funnel"/>
            @if (doShowFilters)
            {
                <div class="filter">
                    <label>Title:</label>
                    <input type="text" style="width: 120px" @bind="titleFilter"/>
                </div>
            }
        </div>
    </div>
    <button @onclick="LoadPosts">Load</button>

    @if (posts == null)
    {
        <span>Loading...</span>
    }
    else if (!posts.Any())
    {
        <span>No posts to be found.</span>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Title</th>
                <th>Body</th>
                <th>Enter</th>
            </tr>
            </thead>
            <tbody>
            @foreach (Post post in posts)
            {
                <tr>
                    <td>@post.Title</td>
                    <td>@post.Body</td>
                    <td>
                        <label @onclick="@(() => navMgr.NavigateTo($"/DisplayPost?id={post.Id}"))" style="cursor: pointer">Display</label>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    @if (!string.IsNullOrEmpty(message))
    {
        <label style="color: red">@message</label>
    }
</div>


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? username;
    private bool isLoggedIn;

    private IEnumerable<Post>? posts;
    private string message = "";
    private bool doShowFilters = false;
    private string? titleFilter;

    protected override async Task OnInitializedAsync()
    {
        titleFilter = "";
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            posts = await postService.GetAsync(null, titleFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            message = e.Message;
        }
    }

}