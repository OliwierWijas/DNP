@page "/DisplayPost"
@using global::Shared
@using global::Shared.DTOs
@using HttpClient.ClientInterfaces
@using UIComponents
@using System.Security.Claims
@inject IPostService postService
@inject ICommentService commentService

<div class="card">
    <h3>Display Post</h3>
    @if (dto is null)
    {
        <label>Loading...</label>
    }
    else
    {
        <Modal ShowModal="showModal">
            <p>A comment has been added.</p>
            <button @onclick="@(() => showModal = false)">Continue</button>
        </Modal>
        <div class="form-group field">
            <label>Post</label>
        </div>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="@dto.Title" readonly/>
        </div>
        <div class="form-group field">
            <label>Body:</label>
            <input type="text" @bind="@dto.Body" readonly/>
        </div>
        @if (!string.IsNullOrEmpty(message))
        {
            <label style="color: red">@message</label>
        }
    }
</div>
@if (comments is not null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Username</th>
            <th>Comment</th>
        </tr>
        @if (isLoggedIn)
        {
            <tr>
                <th>@username</th>
                <th>
                    <input type="text" @bind="text" @bind:event="oninput"/>
                </th>
                <th>
                    <button @onclick="WriteCommentAsync" class="acceptbtn">Comment</button>
                </th>
            </tr>
        }
        </thead>
        <tbody>
        @foreach (Comment comment in comments)
        {
            <tr>
                <td>@comment.User.Username</td>
                <td>@comment.Text</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <label>Data loading...</label>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public int Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? username;
    private bool isLoggedIn;

    private PostBasicDto dto;
    private string text;
    private IEnumerable<Comment>? comments;

    private string message;
    private bool showModal;

    protected override async Task OnInitializedAsync()
    {
        message = "";
        try
        {
            dto = await postService.GetByIdAsync(Id);
            comments = await commentService.GetAsync(Id);
            
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            isLoggedIn = user.Identity is not null;

            if (isLoggedIn)
            {
                IEnumerable<Claim> userclaims = user.Claims.AsEnumerable();
                username = userclaims.FirstOrDefault(c => c.Type.Equals("Username"))!.Value;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            message = e.Message;
        }
    }

    private async Task WriteCommentAsync()
    {
        try
        {
            await commentService.CreateAsync(new CommentCreationDto(Id, username, text));
            comments = await commentService.GetAsync(Id);
            text = "";
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            message = e.Message;
        }
    }

}